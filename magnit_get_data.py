import json
import time
from bs4 import BeautifulSoup
from selenium import webdriver
import telebot
from config import TOKENS

base_url = 'https://magnit.ru/promo/'
list_cars = []
collect_product = []
collect_product1 = {}
collect_product1['–ú–∞–≥–Ω–∏—Ç'] = []


def get_html(url):
    options = webdriver.ChromeOptions()
    options.add_argument("--disable-blink-features=AutomationControlled")
    driver = webdriver.Chrome(
        executable_path=r"C:\Users\User129\PycharmProjects\pythonProject\Parsing\Magnit\chromedriver_win32\chromedriver.exe",
        options=options)
    driver.maximize_window()

    try:
        driver.get(url=url)
        time.sleep(3)
        print(driver.current_url)
        while True:
            # Get scroll height
            lenOfPage = driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
            match = False
            while (match == False):
                lastCount = lenOfPage
                time.sleep(3)
                lenOfPage = driver.execute_script(
                    "window.scrollTo(0, document.body.scrollHeight);var lenOfPage=document.body.scrollHeight;return lenOfPage;")
                if lastCount == lenOfPage:
                    match = True
                    break
            return driver.page_source
    except Exception as _ex:
        print(_ex)
    finally:
        driver.close()
        driver.quit()


def get_data(text):
    soup = BeautifulSoup(text, 'lxml')
    city = soup.find('a', class_='header__contacts-link_city').text.strip()
    cards = soup.findAll('a', class_='card-sale')
    for num, card in enumerate(cards):
        try:
            card_title = card.find('div', class_='card-sale__title').text.strip()
            card_discont = card.find('div', class_='card-sale__discount').text.strip()
            card_price_old_integer = card.find('div', class_='label__price label__price_old').find('span',
                                                                                                   class_='label__price-integer').text.strip()
            card_price_old_decimal = card.find('div', class_='label__price label__price_old').find('span',
                                                                                                   class_='label__price-decimal').text.strip()
            card_old_price = f'{card_price_old_integer}.{card_price_old_decimal}'

            card_price_new_integer = card.find('div', class_='label__price label__price_new').find('span',
                                                                                                   class_='label__price-integer').text.strip()
            card_price_new_decimal = card.find('div', class_='label__price label__price_new').find('span',
                                                                                                   class_='label__price-decimal').text.strip()
            card_new_price = f'{card_price_new_integer}.{card_price_new_decimal}'
            car_sale_data = card.find('div', class_='card-sale__date').text.strip().replace('\n', ' ')
        except AttributeError:
            continue
        car_econom = float(card_old_price) - float(card_new_price)
        car_econom = round(car_econom, 2)
        car_econom = str(car_econom).replace('.', ',')

        card_title = str(card_title).lower()

        list_cars.append({
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': card_title,
            '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏': card_discont,
            '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': card_old_price,
            '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': card_new_price,
            '–î–∞—Ç–∞ –∞–∫—Ü–∏–∏': car_sale_data,
            '–≠–∫–æ–Ω–æ–º–∏—è': car_econom
        })
        # —Å–æ–±–∏—Ä–∞–µ–º json —Ñ–∞–π–ª.
        with open(f'{city}_{car_sale_data[1]}—Ç–µ—Å—Ç.json', 'w', encoding='utf-8') as file:
            json.dump(list_cars, file, sort_keys=False, indent=4, ensure_ascii=False)


def telegram_bot(token):
    bot = telebot.TeleBot(token)

    @bot.message_handler(commands=["start"])
    def start_message(message):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton("üëã –ú–æ—Å–∫–≤–∞")
        markup.add(btn1)
        bot.send_message(message.chat.id,
                         text='–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ ! ', reply_markup=markup)

    @bot.message_handler(content_types=['text'])
    def send_text(message):
        print(message.text.lower())
        if message.text.lower() == 'price':
            try:
                bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –¥–∞–Ω–Ω—ã–µ !')
                bot.send_document(message.chat.id, document=open('./MSK_list1.xlsx', 'rb'))
            except Exception as Ex:
                print(Ex)
                bot.send_message(message.chat.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ !')
        if message.text.lower() in 'üëã –º–æ—Å–∫–≤–∞':
            try:
                bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–æ—Å–∫–≤—É !')
                bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –µ–≥–æ —Ñ–∏—Ä–º—É !')


            except Exception as Ex:
                print(Ex)
        else:
            try:
                name_send_info = []
                name_send_info.clear()
                name_send_info = read_file(message.text)

                # –ü—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
                if len(name_send_info) >= 1:
                    ind_prod = 0
                    ind_sale = 1
                    ind_price = 2
                    ind_new_price = 3
                    ind_data = 4
                    ind_ero = 5
                    for item in name_send_info:
                        try:
                            named = f'\n –ü—Ä–æ–¥—É–∫—Ç: {name_send_info[ind_prod]}, \n–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: {name_send_info[ind_sale]}, \n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {name_send_info[ind_price]},' \
                                    f' \n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {name_send_info[ind_new_price]}, \n–î–∞—Ç–∞ –∞–∫—Ü–∏–∏:  {name_send_info[ind_data]}, \n–≠–∫–æ–Ω–æ–º–∏—è:  {name_send_info[ind_ero]} —Ä—É–±.'

                            ind_prod += 6
                            ind_sale += 6
                            ind_price += 6
                            ind_new_price += 6
                            ind_data += 6
                            ind_ero += 6
                            bot.send_message(message.chat.id, named)

                        except IndexError:
                            exit()
                        finally:
                            continue
                elif len(name_send_info) == 0:
                    print('0')
                    bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç ! ')
            except Exception as Ex:
                print(Ex)

    @bot.message_handler(commands=["reset"])
    def cmd_reset(message):
        bot.send_message(message.chat.id, "–ß—Ç–æ –∂, –Ω–∞—á–Ω—ë–º –ø–æ-–Ω–æ–≤–æ–π.")

    bot.polling(none_stop=False)


def read_file(name):
    with open(f'../v2/–ú–æ—Å–∫–≤–∞_—Ç–µ—Å—Ç_lower.json', 'r', encoding='utf-8') as f:
        text = json.load(f)

    for item_text in text:
        if name in item_text['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']:
            collect_product1['–ú–∞–≥–Ω–∏—Ç'].append({
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': item_text["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
                '–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏': item_text["–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏"],
                '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞': item_text["–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"],
                '–ù–æ–≤–∞—è —Ü–µ–Ω–∞': item_text["–ù–æ–≤–∞—è —Ü–µ–Ω–∞"],
                '–î–∞—Ç–∞ –∞–∫—Ü–∏–∏': item_text["–î–∞—Ç–∞ –∞–∫—Ü–∏–∏"],
                '–≠–∫–æ–Ω–æ–º–∏—è': item_text["–≠–∫–æ–Ω–æ–º–∏—è"]
            })

            if name in item_text['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']:
                collect_product.append(item_text["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"])
                collect_product.append(item_text["–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏"])
                collect_product.append(item_text["–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞"])
                collect_product.append(item_text["–ù–æ–≤–∞—è —Ü–µ–Ω–∞"])
                collect_product.append(item_text["–î–∞—Ç–∞ –∞–∫—Ü–∏–∏"])
                collect_product.append(item_text["–≠–∫–æ–Ω–æ–º–∏—è"])

    return collect_product


def main():
    telegram_bot(TOKENS)





if __name__ == '__main__':
    main()
